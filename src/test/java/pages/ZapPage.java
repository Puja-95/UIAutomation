import org.zaproxy.clientapi.core.ClientApi;
import org.zaproxy.clientapi.core.ClientApiException;

public class ZapPage {
    private ClientApi zapApi;
    private static final String ZAP_ADDRESS = "localhost";
    private static final int ZAP_PORT = 8080;
    private static final String ZAP_API_KEY = ""; // Optional: Add API Key if required

    // Constructor to initialize ZAP Client API
    public ZapPage() {
        zapApi = new ClientApi(ZAP_ADDRESS, ZAP_PORT, ZAP_API_KEY);
    }

    /**
     * Starts a Spider Scan for the given target URL.
     *
     * @param targetURL URL to scan
     */
    public void startSpiderScan(String targetURL) throws ClientApiException, InterruptedException {
        System.out.println("Starting Spider Scan for: " + targetURL);
        zapApi.spider.scan(targetURL, null, null, null, null);

        // Wait for Spider Scan to complete
        while (!"100".equals(zapApi.spider.status(""))) {
            System.out.println("Spider progress: " + zapApi.spider.status("") + "%");
            Thread.sleep(1000);
        }
        System.out.println("Spider Scan completed.");
    }

    /**
     * Starts an Active Scan for the given target URL.
     *
     * @param targetURL URL to scan
     */
    public void startActiveScan(String targetURL) throws ClientApiException, InterruptedException {
        System.out.println("Starting Active Scan for: " + targetURL);
        zapApi.ascan.scan(targetURL, "true", "false", null, null, null);

        // Wait for Active Scan to complete
        while (!"100".equals(zapApi.ascan.status(""))) {
            System.out.println("Active Scan progress: " + zapApi.ascan.status("") + "%");
            Thread.sleep(1000);
        }
        System.out.println("Active Scan completed.");
    }

    /**
     * Fetches the HTML security report generated by ZAP.
     *
     * @return ZAP HTML report as a String
     */
    public String getHtmlReport() throws ClientApiException {
        System.out.println("Fetching ZAP HTML Report...");
        return new String(zapApi.core.htmlreport());
    }
}
